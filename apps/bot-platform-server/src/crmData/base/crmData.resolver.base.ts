/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CrmData } from "./CrmData";
import { CrmDataCountArgs } from "./CrmDataCountArgs";
import { CrmDataFindManyArgs } from "./CrmDataFindManyArgs";
import { CrmDataFindUniqueArgs } from "./CrmDataFindUniqueArgs";
import { CreateCrmDataArgs } from "./CreateCrmDataArgs";
import { UpdateCrmDataArgs } from "./UpdateCrmDataArgs";
import { DeleteCrmDataArgs } from "./DeleteCrmDataArgs";
import { Bot } from "../../bot/base/Bot";
import { User } from "../../user/base/User";
import { CrmDataService } from "../crmData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CrmData)
export class CrmDataResolverBase {
  constructor(
    protected readonly service: CrmDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CrmData",
    action: "read",
    possession: "any",
  })
  async _crmDataItemsMeta(
    @graphql.Args() args: CrmDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CrmData])
  @nestAccessControl.UseRoles({
    resource: "CrmData",
    action: "read",
    possession: "any",
  })
  async crmDataItems(
    @graphql.Args() args: CrmDataFindManyArgs
  ): Promise<CrmData[]> {
    return this.service.crmDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CrmData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CrmData",
    action: "read",
    possession: "own",
  })
  async crmData(
    @graphql.Args() args: CrmDataFindUniqueArgs
  ): Promise<CrmData | null> {
    const result = await this.service.crmData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CrmData)
  @nestAccessControl.UseRoles({
    resource: "CrmData",
    action: "create",
    possession: "any",
  })
  async createCrmData(
    @graphql.Args() args: CreateCrmDataArgs
  ): Promise<CrmData> {
    return await this.service.createCrmData({
      ...args,
      data: {
        ...args.data,

        bot: args.data.bot
          ? {
              connect: args.data.bot,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CrmData)
  @nestAccessControl.UseRoles({
    resource: "CrmData",
    action: "update",
    possession: "any",
  })
  async updateCrmData(
    @graphql.Args() args: UpdateCrmDataArgs
  ): Promise<CrmData | null> {
    try {
      return await this.service.updateCrmData({
        ...args,
        data: {
          ...args.data,

          bot: args.data.bot
            ? {
                connect: args.data.bot,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CrmData)
  @nestAccessControl.UseRoles({
    resource: "CrmData",
    action: "delete",
    possession: "any",
  })
  async deleteCrmData(
    @graphql.Args() args: DeleteCrmDataArgs
  ): Promise<CrmData | null> {
    try {
      return await this.service.deleteCrmData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Bot, {
    nullable: true,
    name: "bot",
  })
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "read",
    possession: "any",
  })
  async getBot(@graphql.Parent() parent: CrmData): Promise<Bot | null> {
    const result = await this.service.getBot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: CrmData): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
