/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CrmData as PrismaCrmData,
  Bot as PrismaBot,
  User as PrismaUser,
} from "@prisma/client";

export class CrmDataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CrmDataCountArgs, "select">): Promise<number> {
    return this.prisma.crmData.count(args);
  }

  async crmDataItems(
    args: Prisma.CrmDataFindManyArgs
  ): Promise<PrismaCrmData[]> {
    return this.prisma.crmData.findMany(args);
  }
  async crmData(
    args: Prisma.CrmDataFindUniqueArgs
  ): Promise<PrismaCrmData | null> {
    return this.prisma.crmData.findUnique(args);
  }
  async createCrmData(args: Prisma.CrmDataCreateArgs): Promise<PrismaCrmData> {
    return this.prisma.crmData.create(args);
  }
  async updateCrmData(args: Prisma.CrmDataUpdateArgs): Promise<PrismaCrmData> {
    return this.prisma.crmData.update(args);
  }
  async deleteCrmData(args: Prisma.CrmDataDeleteArgs): Promise<PrismaCrmData> {
    return this.prisma.crmData.delete(args);
  }

  async getBot(parentId: string): Promise<PrismaBot | null> {
    return this.prisma.crmData
      .findUnique({
        where: { id: parentId },
      })
      .bot();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.crmData
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
