/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  LanguageSetting as PrismaLanguageSetting,
  User as PrismaUser,
} from "@prisma/client";

export class LanguageSettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LanguageSettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.languageSetting.count(args);
  }

  async languageSettings(
    args: Prisma.LanguageSettingFindManyArgs
  ): Promise<PrismaLanguageSetting[]> {
    return this.prisma.languageSetting.findMany(args);
  }
  async languageSetting(
    args: Prisma.LanguageSettingFindUniqueArgs
  ): Promise<PrismaLanguageSetting | null> {
    return this.prisma.languageSetting.findUnique(args);
  }
  async createLanguageSetting(
    args: Prisma.LanguageSettingCreateArgs
  ): Promise<PrismaLanguageSetting> {
    return this.prisma.languageSetting.create(args);
  }
  async updateLanguageSetting(
    args: Prisma.LanguageSettingUpdateArgs
  ): Promise<PrismaLanguageSetting> {
    return this.prisma.languageSetting.update(args);
  }
  async deleteLanguageSetting(
    args: Prisma.LanguageSettingDeleteArgs
  ): Promise<PrismaLanguageSetting> {
    return this.prisma.languageSetting.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.languageSetting
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
