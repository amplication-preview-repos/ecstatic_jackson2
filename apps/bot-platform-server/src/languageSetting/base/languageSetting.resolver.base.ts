/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LanguageSetting } from "./LanguageSetting";
import { LanguageSettingCountArgs } from "./LanguageSettingCountArgs";
import { LanguageSettingFindManyArgs } from "./LanguageSettingFindManyArgs";
import { LanguageSettingFindUniqueArgs } from "./LanguageSettingFindUniqueArgs";
import { CreateLanguageSettingArgs } from "./CreateLanguageSettingArgs";
import { UpdateLanguageSettingArgs } from "./UpdateLanguageSettingArgs";
import { DeleteLanguageSettingArgs } from "./DeleteLanguageSettingArgs";
import { User } from "../../user/base/User";
import { LanguageSettingService } from "../languageSetting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LanguageSetting)
export class LanguageSettingResolverBase {
  constructor(
    protected readonly service: LanguageSettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LanguageSetting",
    action: "read",
    possession: "any",
  })
  async _languageSettingsMeta(
    @graphql.Args() args: LanguageSettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LanguageSetting])
  @nestAccessControl.UseRoles({
    resource: "LanguageSetting",
    action: "read",
    possession: "any",
  })
  async languageSettings(
    @graphql.Args() args: LanguageSettingFindManyArgs
  ): Promise<LanguageSetting[]> {
    return this.service.languageSettings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LanguageSetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LanguageSetting",
    action: "read",
    possession: "own",
  })
  async languageSetting(
    @graphql.Args() args: LanguageSettingFindUniqueArgs
  ): Promise<LanguageSetting | null> {
    const result = await this.service.languageSetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LanguageSetting)
  @nestAccessControl.UseRoles({
    resource: "LanguageSetting",
    action: "create",
    possession: "any",
  })
  async createLanguageSetting(
    @graphql.Args() args: CreateLanguageSettingArgs
  ): Promise<LanguageSetting> {
    return await this.service.createLanguageSetting({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LanguageSetting)
  @nestAccessControl.UseRoles({
    resource: "LanguageSetting",
    action: "update",
    possession: "any",
  })
  async updateLanguageSetting(
    @graphql.Args() args: UpdateLanguageSettingArgs
  ): Promise<LanguageSetting | null> {
    try {
      return await this.service.updateLanguageSetting({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LanguageSetting)
  @nestAccessControl.UseRoles({
    resource: "LanguageSetting",
    action: "delete",
    possession: "any",
  })
  async deleteLanguageSetting(
    @graphql.Args() args: DeleteLanguageSettingArgs
  ): Promise<LanguageSetting | null> {
    try {
      return await this.service.deleteLanguageSetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: LanguageSetting
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
