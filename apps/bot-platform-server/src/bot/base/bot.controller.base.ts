/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BotService } from "../bot.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BotCreateInput } from "./BotCreateInput";
import { Bot } from "./Bot";
import { BotFindManyArgs } from "./BotFindManyArgs";
import { BotWhereUniqueInput } from "./BotWhereUniqueInput";
import { BotUpdateInput } from "./BotUpdateInput";
import { CrmDataFindManyArgs } from "../../crmData/base/CrmDataFindManyArgs";
import { CrmData } from "../../crmData/base/CrmData";
import { CrmDataWhereUniqueInput } from "../../crmData/base/CrmDataWhereUniqueInput";
import { SubscriptionFindManyArgs } from "../../subscription/base/SubscriptionFindManyArgs";
import { Subscription } from "../../subscription/base/Subscription";
import { SubscriptionWhereUniqueInput } from "../../subscription/base/SubscriptionWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BotControllerBase {
  constructor(
    protected readonly service: BotService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Bot })
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: BotCreateInput,
  })
  async createBot(@common.Body() data: BotCreateInput): Promise<Bot> {
    return await this.service.createBot({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        active: true,
        createdAt: true,
        customPrompts: true,
        id: true,
        languageModel: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Bot] })
  @ApiNestedQuery(BotFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bots(@common.Req() request: Request): Promise<Bot[]> {
    const args = plainToClass(BotFindManyArgs, request.query);
    return this.service.bots({
      ...args,
      select: {
        active: true,
        createdAt: true,
        customPrompts: true,
        id: true,
        languageModel: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Bot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async bot(@common.Param() params: BotWhereUniqueInput): Promise<Bot | null> {
    const result = await this.service.bot({
      where: params,
      select: {
        active: true,
        createdAt: true,
        customPrompts: true,
        id: true,
        languageModel: true,
        name: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Bot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: BotUpdateInput,
  })
  async updateBot(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() data: BotUpdateInput
  ): Promise<Bot | null> {
    try {
      return await this.service.updateBot({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          active: true,
          createdAt: true,
          customPrompts: true,
          id: true,
          languageModel: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Bot })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBot(
    @common.Param() params: BotWhereUniqueInput
  ): Promise<Bot | null> {
    try {
      return await this.service.deleteBot({
        where: params,
        select: {
          active: true,
          createdAt: true,
          customPrompts: true,
          id: true,
          languageModel: true,
          name: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/crmDataItems")
  @ApiNestedQuery(CrmDataFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CrmData",
    action: "read",
    possession: "any",
  })
  async findCrmDataItems(
    @common.Req() request: Request,
    @common.Param() params: BotWhereUniqueInput
  ): Promise<CrmData[]> {
    const query = plainToClass(CrmDataFindManyArgs, request.query);
    const results = await this.service.findCrmDataItems(params.id, {
      ...query,
      select: {
        bot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        email: true,
        id: true,
        phoneNumber: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/crmDataItems")
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "update",
    possession: "any",
  })
  async connectCrmDataItems(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: CrmDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      crmDataItems: {
        connect: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/crmDataItems")
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "update",
    possession: "any",
  })
  async updateCrmDataItems(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: CrmDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      crmDataItems: {
        set: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/crmDataItems")
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "update",
    possession: "any",
  })
  async disconnectCrmDataItems(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: CrmDataWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      crmDataItems: {
        disconnect: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/subscriptions")
  @ApiNestedQuery(SubscriptionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Subscription",
    action: "read",
    possession: "any",
  })
  async findSubscriptions(
    @common.Req() request: Request,
    @common.Param() params: BotWhereUniqueInput
  ): Promise<Subscription[]> {
    const query = plainToClass(SubscriptionFindManyArgs, request.query);
    const results = await this.service.findSubscriptions(params.id, {
      ...query,
      select: {
        bot: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        endDate: true,
        id: true,
        startDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "update",
    possession: "any",
  })
  async connectSubscriptions(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        connect: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "update",
    possession: "any",
  })
  async updateSubscriptions(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        set: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/subscriptions")
  @nestAccessControl.UseRoles({
    resource: "Bot",
    action: "update",
    possession: "any",
  })
  async disconnectSubscriptions(
    @common.Param() params: BotWhereUniqueInput,
    @common.Body() body: SubscriptionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      subscriptions: {
        disconnect: body,
      },
    };
    await this.service.updateBot({
      where: params,
      data,
      select: { id: true },
    });
  }
}
